// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url = "file:./dev.db"
}

model User {
  id Int @id @default(autoincrement())
  username String @unique
  email String @unique
  password String
  userType String
  investorId Int?
  adminId Int?
  dateCreated DateTime @default(now())
  admin Admin?
  investor Investor?
  comments Comment[]
}

model Admin {
  adminId Int @id @default(autoincrement())
  adminType String
  user User @relation(fields: [adminId], references: [id])

  tutorials Tutorial[]
  supportQueries SupportQuery[]
  @@map("Admins")
}

model Investor {
  investorId Int @id @default(autoincrement())
  portfolioId Int @unique
  user User @relation(fields: [investorId], references: [id])
  portfolio Portfolio @relation(fields: [portfolioId], references: [id])

  transactions Transaction[]
  blogs Blog[]
  supportQueries SupportQuery[]
  chatbotConversations ChatbotConversation[]
  @@map("Investors")
}


model Portfolio {
  id Int @id @default(autoincrement())
  balance Float
  investor Investor? @relation
  transactions Transaction[]
  cryptoPortfoliosOwned CryptoPortfolioOwned[]
  @@map("Portfolios")
}

model CryptoPortfolioOwned {
  id           Int            @unique
  portfolioId  Int
  cryptoId     Int
  quantity     Float
  portfolio    Portfolio      @relation(fields: [portfolioId], references: [id])
  cryptocurrency Cryptocurrency @relation(fields: [cryptoId], references: [id])

  @@id([portfolioId, cryptoId]) // Use portfolioId and cryptoId as a compound primary key
  @@map("CryptoPortfoliosOwned")
}

model Cryptocurrency {
  id           Int                     @id @default(autoincrement())
  name         String                  @unique
  symbol       String                  @unique
  currentPrice Float
  transactions Transaction[]
  portfolios   CryptoPortfolioOwned[]
  @@map("Cryptocurrencies")
}

model Transaction {
  id Int @id @default(autoincrement())
  type String
  amount Float
  dateTime DateTime @default(now())
  investorId Int
  cryptoId Int?
  portfolioId Int

  portfolio Portfolio @relation(fields: [portfolioId], references: [id])
  investor Investor @relation(fields: [investorId], references: [investorId])
  cryptocurrency Cryptocurrency? @relation(fields: [cryptoId], references: [id])

  @@map("Transactions")
}

model Blog {
  id Int @id @default(autoincrement())
  title String
  content String
  datePosted DateTime @default(now())
  authorId Int

  author Investor @relation(fields: [authorId], references: [investorId])
  comments Comment[]
  @@map("Blogs")
}

model Comment {
  id Int @id @default(autoincrement())
  content String
  datePosted DateTime @default(now())
  blogId Int
  authorId Int
  blogPost Blog @relation(fields: [blogId], references: [id])
  author User @relation(fields: [authorId], references: [id])

  @@map("Comments")
}

model Tutorial {
  id Int @id @default(autoincrement())
  title String
  content String
  dateCreated DateTime @default(now())
  adminId Int
  admin Admin @relation(fields: [adminId], references: [adminId])

  @@map("Tutorials")
}

model SupportQuery {
  id Int @id @default(autoincrement())
  content String
  dateCreated DateTime @default(now())
  investorId Int
  adminId Int?
  investor Investor? @relation(fields: [investorId], references: [investorId])
  admin Admin? @relation(fields: [adminId], references: [adminId])

  @@map("SupportQueries")
}

model ChatbotConversation {
  id Int @id @default(autoincrement())
  investorId Int
  startDate DateTime @default(now())
  endDate DateTime?

  investor Investor @relation(fields: [investorId], references: [investorId])
  messages ChatbotMessage[]

  @@map("ChatbotConversations")
}

model ChatbotMessage{
  id Int @id @default(autoincrement())
  conversationId Int
  sender String
  message String
  dateTimeSent DateTime @default(now())
  conversation ChatbotConversation @relation(fields: [conversationId], references: [id])

  @@map("ChatbotMessages")
}